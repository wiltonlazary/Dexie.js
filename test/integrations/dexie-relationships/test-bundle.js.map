{"version":3,"file":"test-bundle.js","sources":["../../dexie-unittest-utils.js","basic-tests.js"],"sourcesContent":["ï»¿import Dexie from 'dexie';\r\nimport {ok, start, test, config} from 'QUnit';\r\n\r\n// Custom QUnit config options.\r\nconfig.urlConfig.push(/*{\r\n    id: \"polyfillIE\", // Remarked because has no effect anymore. Find out why.\r\n\tlabel: \"Include IE Polyfill\",\r\n    tooltip: \"Enabling this will include the idb-iegap polyfill that makes\" +\r\n    \" IE10&IE11 support multiEntry and compound indexes as well as compound\" +\r\n    \" primary keys\"\r\n}, {\r\n    id: \"indexedDBShim\", // Remarked because has no effect anymore. Need to find out why. Should invoke the shim if set!\r\n    label: \"IndexedDBShim (UseWebSQL as backend)\",\r\n    tooltip: \"Enable this in Safari browsers without indexedDB support or\" +\r\n    \" with poor indexedDB support\"\r\n},*/ {\r\n    id: \"dontoptimize\",\r\n    label: \"Dont optimize tests\",\r\n    tooltip: \"Always delete and recreate the DB between each test\"\r\n}, {\r\n    id: \"longstacks\",\r\n    label: \"Long async stacks\",\r\n    tooltip: \"Set Dexie.debug=true, turning on long async stacks on all\" +\r\n    \" errors (Actually we use Dexie.debug='dexie' so that frames from\" +\r\n    \" dexie.js are also included)\"\r\n });\r\n\r\nDexie.debug = window.location.search.indexOf('longstacks') !== -1 ? 'dexie' : false;\r\nif (window.location.search.indexOf('longstacks=tests') !== -1) Dexie.debug = true; // Don't include stuff from dexie.js.\r\n\r\nvar no_optimize = window.no_optimize || window.location.search.indexOf('dontoptimize') !== -1;\r\n\r\nexport function resetDatabase(db) {\r\n    /// <param name=\"db\" type=\"Dexie\"></param>\r\n    var Promise = Dexie.Promise;\r\n    return no_optimize || !db._hasBeenCreated ?\r\n        // Full Database recreation. Takes much time!\r\n        db.delete().then(function () {\r\n            return db.open().then(function() {\r\n                if (!no_optimize) {\r\n                    db._hasBeenCreated = true;\r\n                    var initialState = (db._initialState = {});\r\n                    // Now, snapshot the database how it looks like initially (what on.populate did)\r\n                    return db.transaction('r', db.tables, function() {\r\n                        var trans = Dexie.currentTransaction;\r\n                        return Promise.all(trans.storeNames.filter(function(tableName) {\r\n                            // Don't clear 'meta tables'\r\n                            return tableName[0] != '_' && tableName[0] != '$';\r\n                        }).map(function (tableName) {\r\n                            var items = {};\r\n                            initialState[tableName] = items;\r\n                            return db.table(tableName).each(function(item, cursor) {\r\n                                items[cursor.primaryKey] = { key: cursor.primaryKey, value: item };\r\n                            });\r\n                        }));\r\n                    });\r\n                }\r\n            });\r\n        })\r\n\r\n        :\r\n\r\n        // Optimize: Don't delete and recreate database. Instead, just clear all object stores,\r\n        // and manually run db.on.populate\r\n        db.transaction('rw!', db.tables, function() {\r\n            // Got to do an operation in order for backend transaction to be created.\r\n            var trans = Dexie.currentTransaction;\r\n            var initialState = db._initialState;\r\n            return Promise.all(trans.storeNames.filter(function(tableName) {\r\n                // Don't clear 'meta tables'\r\n                return tableName[0] != '_' && tableName[0] != '$';\r\n            }).map(function(tableName) {\r\n                // Read current state\r\n                var items = {};\r\n                return db.table(tableName).each(function(item, cursor) {\r\n                    items[cursor.primaryKey] = { key: cursor.primaryKey, value: item };\r\n                }).then(function() {\r\n                    // Diff from initialState\r\n                    // Go through initialState and diff with current state\r\n                    var initialItems = initialState[tableName];\r\n                    return Promise.all(Object.keys(initialItems).map(function(key) {\r\n                        var item = items[key];\r\n                        var initialItem = initialItems[key];\r\n                        if (!item || JSON.stringify(item.value) != JSON.stringify(initialItem.value))\r\n                            return (db.table(tableName).schema.primKey.keyPath ? db.table(tableName).put(initialItem.value) :\r\n                                db.table(tableName).put(initialItem.value, initialItem.key));\r\n                        return Promise.resolve();\r\n                    }));\r\n                }).then(function() {\r\n                    // Go through current state and diff with initialState\r\n                    var initialItems = initialState[tableName];\r\n                    return Promise.all(Object.keys(items).map(function (key) {\r\n                        var item = items[key];\r\n                        var initialItem = initialItems[key];\r\n                        if (!initialItem)\r\n                            return db.table(tableName).delete(item.key);\r\n                        return Promise.resolve();\r\n                    }));\r\n                });\r\n            }));\r\n        });\r\n}\r\n\r\nexport function deleteDatabase(db) {\r\n    var Promise = Dexie.Promise;\r\n    return no_optimize ? db.delete() : db.transaction('rw!', db.tables, function() {\r\n        // Got to do an operation in order for backend transaction to be created.\r\n        var trans = Dexie.currentTransaction;\r\n        return Promise.all(trans.storeNames.filter(function(tableName) {\r\n            // Don't clear 'meta tables'\r\n            return tableName[0] != '_' && tableName[0] != '$';\r\n        }).map(function(tableName) {\r\n            // Clear all tables\r\n            return db.table(tableName).clear();\r\n        }));\r\n    });\r\n}\r\n\r\nvar isIE = !(window.ActiveXObject) && \"ActiveXObject\" in window;\r\nvar isEdge = /Edge\\/\\d+/.test(navigator.userAgent);\r\nvar hasPolyfillIE = [].slice.call(document.getElementsByTagName(\"script\")).some(\r\n    s => s.src.indexOf(\"idb-iegap\") !== -1);\r\n\r\nexport function supports (features) {\r\n    return features.split('+').reduce((result,feature)=>{\r\n        switch (feature.toLowerCase()) {\r\n            case \"compound\":\r\n                return result && Array.isArray(Dexie.maxKey);\r\n            case \"multientry\":\r\n                return result && (hasPolyfillIE || (!isIE && !isEdge)); // Should add Safari to\r\n            case \"deleteobjectstoreafterread\":\r\n                return result && (!isIE && !isEdge);\r\n            case \"versionchange\":\r\n                return result;\r\n                //return result && (!isIE && !isEdge); // Should add Safari to\r\n            case \"binarykeys\":\r\n                try {\r\n                    return result && Array.isArray(Dexie.maxKey) && indexedDB.cmp(new Uint8Array([1]), new Uint8Array([1])) === 0;\r\n                } catch (e) {\r\n                    return false;\r\n                }\r\n\r\n            default:\r\n                throw new Error (\"Unknown feature: \" + feature);\r\n        }\r\n    }, true);\r\n}\r\n\r\nexport function spawnedTest (name, num, promiseGenerator) {\r\n    if (!promiseGenerator) {\r\n        promiseGenerator = num;\r\n        test(name, function(assert) {\r\n            let done = assert.async();\r\n            Dexie.spawn(promiseGenerator)\r\n                .catch(e => ok(false, e.stack || e))\r\n                .then(done);\r\n        });\r\n    } else {\r\n        test(name, num, function(assert) {\r\n            let done = assert.async();\r\n            Dexie.spawn(promiseGenerator)\r\n                .catch(e => ok(false, e.stack || e))\r\n                .then(done);\r\n        });\r\n    }\r\n}\r\n\r\nexport function promisedTest (name, num, asyncFunction) {\r\n    if (!asyncFunction) {\r\n        asyncFunction = num;\r\n        test(name, (assert) => {\r\n            let done = assert.async();\r\n            Promise.resolve().then(asyncFunction)\r\n              .catch(e => ok(false, e.stack || e))\r\n              .then(done);\r\n        });\r\n    } else {\r\n        test(name, num, (assert) => {\r\n            let done = assert.async();\r\n            Promise.resolve().then(asyncFunction)\r\n              .catch(e => ok(false, e.stack || e))\r\n              .then(done);\r\n        });\r\n    }\r\n}\r\n","import Dexie from 'dexie';\r\nimport dexieRelationships from 'dexie-relationships';\r\nimport {resetDatabase, promisedTest} from '../../dexie-unittest-utils';\r\nimport {module, asyncTest, start, stop, strictEqual, deepEqual, ok} from 'QUnit';\r\n\r\nconst assert = ok;\r\n\r\n//\r\n// Define DB and schema\r\n//\r\nvar db = new Dexie('bands-simple', {addons: [dexieRelationships]});\r\ndb.version(1).stores({\r\n    genres: `\r\n            id,\r\n            name`,\r\n    bands: `\r\n            id,\r\n            name,\r\n            genreId -> genres.id`,\r\n    albums: `\r\n            id,\r\n            name,\r\n            bandId -> bands.id,\r\n            year`\r\n});\r\n\r\n//\r\n// Populate Database\r\n//\r\ndb.on('populate', () => {\r\n    // Genres\r\n    db.genres.bulkAdd([{\r\n        id: 1,\r\n        name: \"Rock\"\r\n    },{\r\n        id: 2,\r\n        name: \"Schlager\"\r\n    }])\r\n\r\n    // Bands\r\n    db.bands.bulkAdd([{\r\n        id: 1,\r\n        name: 'Beatles',\r\n        genreId: 1\r\n    },{\r\n        id: 2,\r\n        name: 'Abba',\r\n        genreId: 2\r\n    }])\r\n\r\n    // Albums\r\n    db.albums.bulkAdd([{\r\n        id: 1,\r\n        name: 'Abbey Road',\r\n        year: 1969,\r\n        bandId: 1\r\n    }, {\r\n        id: 2,\r\n        name: 'Let It Be',\r\n        year: 1970,\r\n        bandId: 1\r\n    }, {\r\n        id: 3,\r\n        name: 'Super Trouper',\r\n        bandId: 2,\r\n        year: 1980\r\n    }, {\r\n        id: 4,\r\n        name: 'Waterloo',\r\n        bandId: 2,\r\n        year: 1974\r\n    }]);\r\n});\r\n\r\n//\r\n// Test Module setup script\r\n//\r\nmodule('dexie-relationships-basics', {\r\n    setup: () => {\r\n        stop();\r\n        resetDatabase(db).catch(e => {\r\n            ok(false, \"Error resetting database: \" + e.stack);\r\n        }).then(()=>start());\r\n    }\r\n});\r\n\r\n//\r\n// Tests goes here...\r\n//\r\n\r\npromisedTest ('many-to-one - should be possible to retrieve an entity with a collection of referring entities attached to it', async () => {\r\n    // Query\r\n    const bands = await db.bands.where('name').equals('Beatles').with({\r\n        albums: 'albums'\r\n    });\r\n\r\n    // Assertions\r\n    assert(bands.length == 1, \"Should be one Beatles\");\r\n    let beatles = bands[0]\r\n    assert(!!beatles.albums, \"Should have got the foreign albums collection\")\r\n    assert(beatles.albums.length === 2, \"Should have 2 albums in this db\")\r\n    assert(beatles.albums[0].name === \"Abbey Road\", \"First albums should be 'Abbey Roead'\")\r\n    assert(beatles.albums[1].name === \"Let It Be\", \"Second album should be 'Let It Be'\")\r\n});\r\n\r\npromisedTest('one-to-one - should be possible to retrieve entity with a foreign key to expand that foreign key', async () => {\r\n    const albums = await db.albums.where('year').between(1970, 1974, true, true).with ({\r\n        band: 'bandId'\r\n    });\r\n\r\n    assert (albums.length === 2, \"Should retrieve two albums between 1970 to 1974\")\r\n    const [letItBe, waterloo] = albums;\r\n\r\n    assert (letItBe.name === \"Let It Be\", \"First album should be 'Let It Be'\")\r\n    assert (!!letItBe.band, \"Should get the band resolved with the query\")\r\n    assert (letItBe.band.name === \"Beatles\", \"The band should be Beatles\")\r\n\r\n    assert (waterloo.name === \"Waterloo\", \"Second album should be 'Waterloo'\")\r\n    assert (!!waterloo.band, \"Should get the band resolved with the query\")\r\n    assert (waterloo.band.name === \"Abba\", \"The band should be Abba\")\r\n});\r\n\r\npromisedTest('Multiple foreign keys of different kind - Should be possible to retrieve entities with oneToOne as well as manyToOne relations', async () => {\r\n    const bands = await db.bands.where('name').equals('Beatles').with({\r\n        albums: 'albums',\r\n        genre: 'genreId'\r\n    });\r\n    assert(bands.length == 1, \"Should be one Beatles\")\r\n    let beatles = bands[0]\r\n    assert(!!beatles.albums, \"Should have got the foreign albums collection\")\r\n    assert(beatles.albums.length === 2, \"Should have 2 albums in this db\")\r\n    assert(beatles.albums[0].name === \"Abbey Road\", \"First albums should be 'Abbey Roead'\")\r\n    assert(beatles.albums[1].name === \"Let It Be\", \"Second album should be 'Let It Be'\")\r\n    assert(!!beatles.genre, \"Should have got the foreign genre entity\")\r\n    assert(beatles.genre.name === \"Rock\", \"The genre should be 'Rock' (even though that could be questionable)\");\r\n});\r\n\r\npromisedTest('Navigation properties should be non-enumerable', async () => {\r\n    console.log('should be possible to put back an object to indexedDB after ' +\r\n      'having retrieved it with navigation properties ' +\r\n      'without storing the navigation properties redundantly');\r\n    \r\n    const bands = await db.bands.where('name').equals('Abba').with({albums: 'albums', genre: 'genreId'});\r\n\r\n    assert(bands.length === 1, \"Should be one Abba\");\r\n    let abba = bands[0]\r\n    assert (!!abba.albums, \"Abba should have its 'albums' foreign collection\")\r\n    assert (!!abba.genre, \"Abba should have its 'genre' foreign property\")\r\n    abba.customProperty = \"Hello world\";\r\n\r\n    await db.bands.put(abba);\r\n\r\n    abba = db.bands.where('name').equals('Abba').first();\r\n\r\n    assert(!abba.albums, \"Abba should not have the 'albums' foreign collection stored redundantly\")\r\n    assert(!abba.genre, \"Abba should not have the 'genre' foreign property stored redundantly\")\r\n});\r\n\r\npromisedTest('Sample from README - should be possible to copy and paste the sample from README', async () => {\r\n    let rows = await db.bands\r\n        .where('name').startsWithAnyOf('A', 'B')\r\n        .with({albums: 'albums', genre: 'genreId'}); // Resolves foreign keys into props\r\n\r\n    assert (true, \"Promise resolved and no exception occured\");\r\n\r\n    // Print the result:\r\n    rows.forEach (band => {\r\n        console.log (`Band Name: ${band.name}`)\r\n        console.log (`Genre: ${band.genre.name}`)\r\n        console.log (`Albums: ${JSON.stringify(band.albums, null, 4)}`)\r\n    });\r\n});\r\n"],"names":["config","test","ok","module","stop","start"],"mappings":"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"}